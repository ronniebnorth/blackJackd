const NodeCouchDb = require('node-couchdb');
 
// node-couchdb instance with default options 
const couch = new NodeCouchDb();

couch.listDatabases().then(function(dbs){  
console.log(dbs);  
});

/*
couch.createDatabase(dbName).then(() => {...}, err => {
    // request error occured 
});

couch.dropDatabase(dbName).then(() => {...}, err => {
    // request error occured 
});

couch.listDatabases().then(dbs => dbs.map(...), err => {
    // request error occured 
});

Get document by its id
couch.get("databaseName", "some_document_id").then(({data, headers, status}) => {
    // data is json response 
    // headers is an object with all response headers 
    // status is statusCode number 
}, err => {
    // either request error occured 
    // ...or err.code=EDOCMISSING if document is missing 
    // ...or err.code=EUNKNOWN if statusCode is unexpected 
});


insert a document
*/
couch.insert("couch-test", {
    _id: "document_id",
    field: ["sample", "data", true]
}).then(({data, headers, status}) => {
    // data is json response 
    // headers is an object with all response headers 
    // status is statusCode number 
}, err => {
    // either request error occured 
    // ...or err.code=EDOCCONFLICT if document with the same id already exists 
});

/*
update a document
// note that "doc" must have both "_id" and "_rev" fields 
couch.update("databaseName", {
    _id: "document_id",
    _rev: "1-xxx"
    field: "new sample data",
    field2: 1
}).then(({data, headers, status}) => {
    // data is json response 
    // headers is an object with all response headers 
    // status is statusCode number 
}, err => {
    // either request error occured 
    // ...or err.code=EFIELDMISSING if either _id or _rev fields are missing 
});


delete a document

couch.del("databaseName", "some_document_id", "document_revision").then(({data, headers, status}) => {
    // data is json response 
    // headers is an object with all response headers 
    // status is statusCode number 
}, err => {
    // either request error occured 
    // ...or err.code=EDOCMISSING if document does not exist 
    // ...or err.code=EUNKNOWN if response status code is unexpected 
});



generate unique id

// get one unique id 
couch.uniqid().then(ids => ids[0]);
 
// get N unique ids 
couch.uniqid(N).then(ids => ids.map(...));


